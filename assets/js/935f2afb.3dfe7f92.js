"use strict";(self.webpackChunkdocusaurus_kit=self.webpackChunkdocusaurus_kit||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"playbookSidebar":[{"type":"link","label":"Intro","href":"/tonic-artist-playbook/","docId":"intro"},{"type":"category","label":"Artist Playbook","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Language Preferences","href":"/tonic-artist-playbook/tutorial-basics/language-preferences","docId":"tutorial-basics/language-preferences"},{"type":"link","label":"Code Size Guidelines","href":"/tonic-artist-playbook/tutorial-basics/code-size-guidelines","docId":"tutorial-basics/code-size-guidelines"},{"type":"link","label":"Parameters","href":"/tonic-artist-playbook/tutorial-basics/parameters","docId":"tutorial-basics/parameters"},{"type":"link","label":"Randomness","href":"/tonic-artist-playbook/tutorial-basics/randomness","docId":"tutorial-basics/randomness"},{"type":"link","label":"Guideline Checklist","href":"/tonic-artist-playbook/tutorial-basics/guideline-checklist","docId":"tutorial-basics/guideline-checklist"}],"href":"/tonic-artist-playbook/category/artist-playbook"}]},"docs":{"intro":{"id":"intro","title":"Intro","description":"The following collection of documentation serves as a set of guidelines for performing a drop via tonic.xyz.","sidebar":"playbookSidebar"},"tutorial-basics/code-size-guidelines":{"id":"tutorial-basics/code-size-guidelines","title":"Code Size Guidelines","description":"Let\'s take the \\"Ideal Scenario\\" code from the Language Preferences section as a reference:","sidebar":"playbookSidebar"},"tutorial-basics/guideline-checklist":{"id":"tutorial-basics/guideline-checklist","title":"Guideline Checklist","description":"The following checklist of requests helps align artists with Tonic\'s processes in order to make a drop as seamless as possible, we understand that in some cases it isn\'t possible to meet certain requests, please feel free to discuss these scenarios with Tonic representatives.","sidebar":"playbookSidebar"},"tutorial-basics/language-preferences":{"id":"tutorial-basics/language-preferences","title":"Language Preferences","description":"While Tonic offers support for generative art to be generated by any programming language, we have found that there are a few fairly unique upsides to having the art generation code written in frontend-friendly Javascript.","sidebar":"playbookSidebar"},"tutorial-basics/parameters":{"id":"tutorial-basics/parameters","title":"Parameters","description":"Ideally, it should be possible for Tonic to feed parameters to the generator code with relative ease. In the case of a browser-based approach, please use URL parameters to enable the feeding of parameters to the generator code.","sidebar":"playbookSidebar"},"tutorial-basics/randomness":{"id":"tutorial-basics/randomness","title":"Randomness","description":"Regarding random number generation: We do not have a preference for what random number generation technique is used to determine traits and other characteristics from the seed, as long as it is deterministic and reproducible. JavaScript\u2019s math.random() function does not provide this guarantee, as different engines utilize different implementations of the function. Any deterministic PRNG implemented in JavaScript should be sufficient. If you have used sfc32 for ArtBlocks projects before, and that will work for this project too. Other good candidate algorithms are mulberry and gjrand. Please let us know if you need help implementing any of these.","sidebar":"playbookSidebar"}}}')}}]);