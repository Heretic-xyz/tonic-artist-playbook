"use strict";(self.webpackChunkdocusaurus_kit=self.webpackChunkdocusaurus_kit||[]).push([[994],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>h});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),p=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(r),m=n,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return r?a.createElement(h,i(i({ref:t},c),{},{components:r})):a.createElement(h,i({ref:t},c))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:n,i[1]=s;for(var p=2;p<o;p++)i[p]=r[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4458:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=r(7462),n=(r(7294),r(3905));const o={sidebar_position:3},i="Parameters",s={unversionedId:"tutorial-basics/parameters",id:"tutorial-basics/parameters",title:"Parameters",description:"Ideally, it should be possible for Tonic to feed parameters to the generator code with relative ease. In the case of a browser-based approach, please use URL parameters to enable the feeding of parameters to the generator code.",source:"@site/docs/tutorial-basics/parameters.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/parameters",permalink:"/tonic-artist-playbook/tutorial-basics/parameters",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"playbookSidebar",previous:{title:"Code Size Guidelines",permalink:"/tonic-artist-playbook/tutorial-basics/code-size-guidelines"},next:{title:"Randomness",permalink:"/tonic-artist-playbook/tutorial-basics/randomness"}},l={},p=[{value:"<code>seed</code>",id:"seed",level:3},{value:"<code>width</code> and <code>height</code>",id:"width-and-height",level:3}],c={toc:p},d="wrapper";function u(e){let{components:t,...r}=e;return(0,n.kt)(d,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"parameters"},"Parameters"),(0,n.kt)("p",null,"Ideally, it should be possible for Tonic to feed parameters to the generator code with relative ease. In the case of a browser-based approach, please use URL parameters to enable the feeding of parameters to the generator code."),(0,n.kt)("h3",{id:"seed"},(0,n.kt)("inlineCode",{parentName:"h3"},"seed")),(0,n.kt)("p",null,"It should be possible to pass a ",(0,n.kt)("inlineCode",{parentName:"p"},"seed")," to the generator with relative ease (e.g. a ",(0,n.kt)("inlineCode",{parentName:"p"},"seed")," URL parameter), results should be deterministic based off the seed, so that users can regenerate their own images from their tokens."),(0,n.kt)("h3",{id:"width-and-height"},(0,n.kt)("inlineCode",{parentName:"h3"},"width")," and ",(0,n.kt)("inlineCode",{parentName:"h3"},"height")),(0,n.kt)("p",null,"It should be possible to pass ",(0,n.kt)("inlineCode",{parentName:"p"},"width")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"height")," pixel count values to the generator with relative ease (e.g. ",(0,n.kt)("inlineCode",{parentName:"p"},"width")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"height")," URL parameters), it's alright if these values have to be the same or follow a certain aspect ratio, if the aspect ratio is 1:1, it's alright for this to be combined into a single ",(0,n.kt)("inlineCode",{parentName:"p"},"size")," value (measured in pixels)."))}u.isMDXComponent=!0}}]);